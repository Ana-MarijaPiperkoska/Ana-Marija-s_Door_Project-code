// Fill out your copyright notice in the Description page of Project Settings.


#pragma once


#include "CoreMinimal.h"
#include "FPSCharacterAnimInstance.h"
#include "InputActionValue.h"
#include "GameFramework/Character.h"
#include "Character/TurningInPlace.h"
#include "../Interfaces/InteractionInterface.h"
#include "Character/CharacterTypes/CombatState.h"
#include "FPSCharacter.generated.h"


class AFpsHud;
class ABaseWeaponClass;
class UCameraComponent;
class UInputMappingContext;
class UInputAction;
class USkeletalMeshComponent;
class UHealthComponent;

USTRUCT()
struct FInteractionData {
	GENERATED_USTRUCT_BODY()

	FInteractionData() : CurrentInteractable(nullptr), LastInteractionCheckTime(0.0f)
	{

	};

	UPROPERTY()
	AActor* CurrentInteractable;

	UPROPERTY()
	float LastInteractionCheckTime;
};


UCLASS()
class GP3TEAM02_API AFPSCharacter : public ACharacter
{
   GENERATED_BODY()


public:
   AFPSCharacter();
	virtual void Tick(float DeltaTime) override;
  
	virtual void SetupPlayerInputComponent(class UInputComponent* PlayerInputComponent) override;
	virtual void GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const override;
	virtual void PostInitializeComponents() override;
	void PlayFireMontage(bool bIsAiming);
	void PlayReloadMontage();

   bool IsAiming() const;


	bool IsSprinting() const;
	void SetSprinting(bool bIsSprinting);
   void UpdateMovementSpeed() const;
   UFUNCTION(Server, Reliable)
	void ServerSetSprinting(bool bIsSprinting);

	void SetWalkSpeed(float NewSpeed);
	UFUNCTION(Server, Reliable)
	void ServerSetWalkSpeed(float NewSpeed);

	void EquipButtonPressed();
   bool IsWeaponEquipped();

   UFUNCTION(BlueprintCallable)
   void ReportNoise(float Loudness);
	UFUNCTION()
	void ReceiveDamage(AActor* DamagedActor, float Damage, const UDamageType* DamageType, class AController* InstigatorController, AActor* DamageCauser);

	UFUNCTION(BlueprintCallable)
	void Elimination();
	UFUNCTION(NetMulticast,Reliable)
	void MulticastEliminated();

	
protected:
	UPROPERTY()
	AFpsHud* FpsHud;

	
   virtual void BeginPlay() override;
   void Move(const FInputActionValue& Value);
   void LookUp(const FInputActionValue& Value);
   void CalculateAO_Pitch();


   void AimOffset(float DeltaTime);


   void CrouchButtonPressed();
   void AimButtonPressed();
   void AimButtonReleased();

	void ReloadButtonPressed();
	


   void Jump() override;


   void Sprint();


   void StopSprint();
   void Reload();

	void SimProxiesTurn();
	
public:

   UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = Components)
   UCameraComponent* Camera;
  
  
   UPROPERTY(EditAnywhere, Category = Input)
   UInputMappingContext* FPSContext;
  
   UPROPERTY(EditAnywhere, Category = Input)
   UInputAction* Movement;


   UPROPERTY(EditAnywhere, Category = Input)
   UInputAction* LookAction;


   UPROPERTY(EditAnywhere, Category = Input)
   UInputAction* ShootAction;


   UPROPERTY(EditAnywhere, Category = Input)
   UInputAction* CrouchAction;


   UPROPERTY(EditAnywhere, Category = Input)
   UInputAction* AimAction;


   UPROPERTY(EditAnywhere, Category = Input)
   UInputAction* JumpAction;

   UPROPERTY(EditAnywhere, Category = Input)
   UInputAction* SprintAction;

   UPROPERTY(EditAnywhere, Category = Input)
   UInputAction* ReloadAction;

	UPROPERTY(EditAnywhere, Category = Input)
	UInputAction* InteractAction;

	UPROPERTY(EditAnywhere, Category = Input)
	UInputAction* DropAction;
   
   UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = Movemen)
   float Pitch;
   void SetPitch();

   UFUNCTION(BlueprintCallable, Category = "Key")
   void PickupKey();




  
	virtual void OnRep_ReplicatedMovement() override;

	FTimerHandle ElimTimer;

	void EliminationTimerFinished();

	UPROPERTY(EditDefaultsOnly)
	float EliminationDelay = 1.f;



private:
  
   class UAIPerceptionStimuliSourceComponent* StimulusSource;
	
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Movement, meta = (AllowPrivateAccess = true), Replicated)
	float WalkSpeed;


	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Movement, meta = (AllowPrivateAccess = true), Replicated)
	float SprintSpeed;
	
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Movement, meta = (AllowPrivateAccess = true), Replicated)
	float CrouchSpeed;
	

	UPROPERTY(EditAnywhere, BlueprintReadOnly, meta= (AllowPrivateAccess = true) )
	class UWidgetComponent* OverHeadWidget;
	
   void SetupStimulusSource();

   float AO_Yaw;
	
   float AO_Pitch;
	
   float InterAO_Yaw;
	

	UPROPERTY( BlueprintReadOnly, Replicated, meta = (AllowPrivateAccess = true))
   bool bSprinting;

	bool bIsShooting;
  
   UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Guns, meta = (AllowPrivateAccess = true))
   ABaseWeaponClass* EquippedGun;


   void FireButtonPressed();
   void FireButtonReleased();


   FRotator StartingAimRotation;
  
   ETurningInPlace TurningInPlace;
   void TurnInPlace(float DeltaTime);
   FRotator LastAimOffset;
   FRotator LastAimRotation;
	

	UPROPERTY(ReplicatedUsing =  OnRep_OverlappingWeapon)
	class AWeapon* OverlappingWeapon;
	
	UFUNCTION()
	void OnRep_OverlappingWeapon(AWeapon* LastWeapon);

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, meta = (AllowPrivateAccess = true))
	class UCombatComponent* CombatComponent;

	UFUNCTION(Server, Reliable)
	void ServerEquipButtonPressed();

	UPROPERTY(EditAnywhere, Category = Combat)
	class UAnimMontage* FireMontage;

	UPROPERTY(EditAnywhere, Category = Combat)
	class UAnimMontage* ReloadMontage;


	void DropButtonPressed();

protected:
	void PerformInteractionCheck();
	void FoundInteractable(AActor* NewInteractable);
	void NoInteractableFound();
	void BeginInteract();
	void EndInteract();
	void Interact();

	UPROPERTY(VisibleAnywhere, Category = "Interaction")
	TScriptInterface<IInteractionInterface> TargetInteractable;

	float InteractionCheckFrequency;

	float InteractionCheckDistance;

	FTimerHandle TimerHandle_Interaction;

	FInteractionData InteractionData;

	bool bRotateRootBone;

	float TurnThreshold = 0.5f;

	FRotator ProxyRotationLastFrame;
	FRotator ProxyRotation;
	float ProxyYaw;
	float TimeSinceLastMovementReplication;

	float CalculateSpeed();

	UPROPERTY(EditAnywhere)
	float MaxHealth = 100.f;

	UPROPERTY(ReplicatedUsing= OnRep_Health,VisibleAnywhere, Category = "Player Stats" )
	float Health = 100.f;

	UFUNCTION()
	void OnRep_Health();

	UPROPERTY()
	class AFPSPlayerController* FPSPlayerController;

	bool bEliminated = false;

public:
	void SetOverlappingWeapon(AWeapon* Weapon);
	FORCEINLINE float GetAO_Yaw() const {return AO_Yaw;}
	FORCEINLINE float GetAO_Pitch() const {return AO_Pitch;}
	FORCEINLINE ETurningInPlace GetTurningInPlace() const {return TurningInPlace;}
	FORCEINLINE bool IsInteracting() const {return GetWorldTimerManager().IsTimerActive(TimerHandle_Interaction);}
	FORCEINLINE bool ShouldRotateRootBone() const {return bRotateRootBone;}
	FORCEINLINE bool IsEliminated() const {return bEliminated;}
	FORCEINLINE float GetHealth()const {return Health;}
	ECombatState GetCombatState() const;
	
	AWeapon* GetEquippedWeapon();

	private:
		bool bHasKey = false;
};
